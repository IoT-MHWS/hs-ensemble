services:
  hs-config:
    image: ${HS_CONFIG_IMAGE:-mhws/hs-config:latest}
    ports:
      - ${HS_CONFIG_PORT:-8888}:8888
    environment:
      HS_CONFIG_SEARCH_LOCATIONS: file:/var/hs/config
    volumes:
      - "./config:/var/hs/config"
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail --silent localhost:8888/actuator/health | grep UP || exit 1" ]
      start_period: 60s
      interval: 10s
      timeout: 60s
      retries: 5

  hs-eureka:
    image: ${HS_EUREKA_IMAGE:-mhws/hs-eureka:latest}
    depends_on:
      hs-config:
        condition: service_healthy
    ports:
      - ${HS_EUREKA_PORT:-8761}:8761
    environment:
      CONFIGSERVER_URI: http://hs-config:8888
    command: application.jar --spring.cloud.config.enabled=true --spring.profiles.active=
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1" ]
      start_period: 60s
      interval: 10s
      timeout: 60s
      retries: 5

  postgres:
    image: postgres:16.0-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      HS_USER_POSTGRES_DATABASE: db_users
      HS_USER_POSTGRES_USERNAME: ${HS_USERS_POSTGRES_USERNAME}
      HS_USER_POSTGRES_PASSWORD: ${HS_USERS_POSTGRES_PASSWORD}
      HS_CMS_POSTGRES_DATABASE: db_cms
      HS_CMS_POSTGRES_USERNAME: ${HS_CMS_POSTGRES_USERNAME}
      HS_CMS_POSTGRES_PASSWORD: ${HS_CMS_POSTGRES_PASSWORD}
      HS_BOX_POSTGRES_DATABASE: db_box_office
      HS_BOX_POSTGRES_USERNAME: ${HS_BOX_POSTGRES_USERNAME}
      HS_BOX_POSTGRES_PASSWORD: ${HS_BOX_POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./services/postgres/entrypoint/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d db_users && pg_isready -U postgres -d db_cms && pg_isready -U postgres -d db_box_office" ]
      start_period: 60s
      interval: 10s
      timeout: 60s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 22000
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22000:22000
    healthcheck:
      test: nc -z localhost 22000 || exit -1
      start_interval: 60s
      interval: 10s
      timeout: 5s
      retries: 3

  kafka1:
    depends_on:
      zookeeper:
        condition: service_healthy
    image: confluentinc/cp-kafka:latest
    ports:
      - 22001:29092
    hostname: kafka1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:22000
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:22001
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    healthcheck:
      test: kafka-topics --bootstrap-server kafka1:22001 --list
      start_interval: 60s
      interval: 10s
      timeout: 5s
      retries: 3

  kafka2:
    depends_on:
      zookeeper:
        condition: service_healthy
    image: confluentinc/cp-kafka:latest
    ports:
      - 22002:29092
    hostname: kafka2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:22000
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:22002
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    healthcheck:
      test: kafka-topics --bootstrap-server kafka2:22002 --list
      start_interval: 60s
      interval: 10s
      timeout: 5s
      retries: 3

  kafka3:
    depends_on:
      zookeeper:
        condition: service_healthy
    image: confluentinc/cp-kafka:latest
    ports:
      - 22003:29092
    hostname: kafka3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:22000
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:22003
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    healthcheck:
      test: kafka-topics --bootstrap-server kafka3:22003 --list
      start_interval: 60s
      interval: 10s
      timeout: 5s
      retries: 3

  kafka-ui:
    depends_on:
      zookeeper:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:22001,kafka2:22002,kafka3:22003
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:22000
    healthcheck:
      test: nc -z localhost 8080 || exit -1
      start_interval: 60s
      interval: 10s
      timeout: 5s
      retries: 3

  hazelcast:
    image: hazelcast/hazelcast:5.3-slim
    environment:
      JAVA_OPTS: "-Dhazelcast.config=/opt/hazelcast/config_ext/hazelcast.yaml"
    ports:
      - ${HS_HAZELCAST_PORT:-5701}:5701
    volumes:
      - ./config/hazelcast.yaml:/opt/hazelcast/config_ext/hazelcast.yaml
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5701/hazelcast/health/node-state || exit 1" ]
      start_period: 60s
      interval: 10s
      timeout: 60s
      retries: 5

  hazelcast-management-center:
    image: hazelcast/management-center:5.3
    depends_on:
      hazelcast:
        condition: service_healthy
    ports:
      - 8080:8080

  liquibase-users:
    build:
      context: services/liquibase
      dockerfile: users.dockerfile
      args:
        BUNDLER_IMAGE: ${HS_CMS_IMAGE:-mhws/hs-users:latest}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      LIQUIBASE_COMMAND_USERNAME: ${HS_USERS_POSTGRES_USERNAME}
      LIQUIBASE_COMMAND_PASSWORD: ${HS_USERS_POSTGRES_PASSWORD}
      LIQUIBASE_COMMAND_URL : jdbc:postgresql://postgres:5432/db_users
    command: --defaults-file=/liquibase/liquibase.properties update

  hs-users:
    image: ${HS_USERS_IMAGE:-mhws/hs-users:latest}
    depends_on:
      hs-config:
        condition: service_healthy
      hs-eureka:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
      liquibase-users:
        condition: service_completed_successfully
    environment:
      HS_USER_EUREKA_URI: http://hs-eureka:8761/eureka
      HS_USER_KAFKA_URI: kafka1:22001,kafka2:22002,kafka3:22003
      HS_USER_DATASOURCE_HOST: postgres
      HS_USER_DATASOURCE_PORT: 5432
      HS_USER_DATASOURCE_DATABASE: db_users
      HS_USER_DATASOURCE_USERNAME: ${HS_USERS_POSTGRES_USERNAME}
      HS_USER_DATASOURCE_PASSWORD: ${HS_USERS_POSTGRES_PASSWORD}
      HS_USER_JWT_SECRET_KEY: ${HS_USERS_JWT_SECRET_KEY}
      HS_USER_JWT_EXPIRATION: ${HS_USERS_JWT_EXPIRATION}
      CONFIGSERVER_URI: http://hs-config:8888
    command: application.jar --spring.cloud.config.enabled=true --spring.profiles.active=
    ports:
      - '8763:8763'

  hs-notifications:
    image: ${HS_NOTIFICATIONS_IMAGE:-mhws/hs-notifications:latest}
    depends_on:
      hs-config:
        condition: service_healthy
      hs-eureka:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
    environment:
      HS_NOTIFICATIONS_EUREKA_URI: http://hs-eureka:8761/eureka
      HS_NOTIFICATIONS_KAFKA_URI: kafka1:22001,kafka2:22002,kafka3:22003
      HS_NOTIFICATIONS_MAIL_PASSWORD: ${HS_NOTIFICATIONS_MAIL_PASSWORD}
      CONFIGSERVER_URI: http://hs-config:8888
    command: application.jar --spring.cloud.config.enabled=true --spring.profiles.active=
    ports:
      - '8079:8079'

  liquibase-cms:
    build:
      context: services/liquibase
      dockerfile: cms.dockerfile
      args:
        BUNDLER_IMAGE: ${HS_CMS_IMAGE:-mhws/hs-cms:latest}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      LIQUIBASE_COMMAND_USERNAME: ${HS_CMS_POSTGRES_USERNAME}
      LIQUIBASE_COMMAND_PASSWORD: ${HS_CMS_POSTGRES_PASSWORD}
      LIQUIBASE_COMMAND_URL : jdbc:postgresql://postgres:5432/db_cms
    command: --defaults-file=/liquibase/liquibase.properties update

  hs-cms:
    image: ${HS_CMS_IMAGE:-mhws/hs-cms:latest}
    depends_on:
      hs-config:
        condition: service_healthy
      hs-eureka:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
      hazelcast:
        condition: service_healthy
      liquibase-cms:
        condition: service_completed_successfully
    environment:
      HS_CMS_EUREKA_URI: http://hs-eureka:8761/eureka
      HS_CMS_KAFKA_URI: kafka1:22001,kafka2:22002,kafka3:22003
      HS_CMS_HAZELCAST_ADDRESSES: hazelcast:5701
      HS_CMS_DATASOURCE_HOST: postgres
      HS_CMS_DATASOURCE_PORT: 5432
      HS_CMS_DATASOURCE_DATABASE: db_cms
      HS_CMS_DATASOURCE_USERNAME: ${HS_CMS_POSTGRES_USERNAME}
      HS_CMS_DATASOURCE_PASSWORD: ${HS_CMS_POSTGRES_PASSWORD}
      CONFIGSERVER_URI: http://hs-config:8888
    command: application.jar --spring.cloud.config.enabled=true --spring.profiles.active=
    ports:
      - '8764:8764'

  liquibase-box-office:
    build:
      context: services/liquibase
      dockerfile: box-office.dockerfile
      args:
        BUNDLER_IMAGE: ${HS_CMS_IMAGE:-mhws/hs-box-office:latest}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      LIQUIBASE_COMMAND_USERNAME: ${HS_BOX_POSTGRES_USERNAME}
      LIQUIBASE_COMMAND_PASSWORD: ${HS_BOX_POSTGRES_PASSWORD}
      LIQUIBASE_COMMAND_URL : jdbc:postgresql://postgres:5432/db_box_office
    command: --defaults-file=/liquibase/liquibase.properties update

  hs-box-office:
    image: ${HS_BOX_IMAGE:-mhws/hs-box-office:latest}
    depends_on:
      hs-config:
        condition: service_healthy
      hs-eureka:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
      liquibase-box-office:
        condition: service_completed_successfully
    environment:
      HS_BOX_OFFICE_EUREKA_URI: http://hs-eureka:8761/eureka
      HS_BOX_OFFICE_KAFKA_URI: kafka1:22001,kafka2:22002,kafka3:22003
      HS_BOX_OFFICE_DATASOURCE_HOST: postgres
      HS_BOX_OFFICE_DATASOURCE_PORT: 5432
      HS_BOX_OFFICE_DATASOURCE_DATABASE: db_box_office
      HS_BOX_OFFICE_DATASOURCE_USERNAME: ${HS_BOX_POSTGRES_USERNAME}
      HS_BOX_OFFICE_DATASOURCE_PASSWORD: ${HS_BOX_POSTGRES_PASSWORD}
      CONFIGSERVER_URI: http://hs-config:8888
    command: application.jar --spring.cloud.config.enabled=true --spring.profiles.active=
    ports:
      - '9009:9009'

  hs-files:
    image: ${HS_FILES_IMAGE:-mhws/hs-files:latest}
    depends_on:
      hs-config:
        condition: service_healthy
      hs-eureka:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
      hazelcast:
        condition: service_healthy
    environment:
      HS_FILES_EUREKA_URI: http://hs-eureka:8761/eureka
      HS_FILES_KAFKA_URI: kafka1:22001,kafka2:22002,kafka3:22003
      HS_FILES_HAZELCAST_ADDRESSES: hazelcast:5701
      CONFIGSERVER_URI: http://hs-config:8888
    volumes:
      - files:/pictures
    command: application.jar --spring.cloud.config.enabled=true --spring.profiles.active=
    ports:
      - '8767:8767'
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent localhost:8767/ws | grep WebSocket || exit 1" ]
      start_period: 1200s
      interval: 10s
      timeout: 30s
      retries: 5

  hs-files-compressor:
    image: ${HS_FILE_COMPRESSOR_IMAGE:-mhws/hs-files-compressor:latest}
    depends_on:
      hs-config:
        condition: service_healthy
      hs-eureka:
        condition: service_healthy
      hs-files:
        condition: service_healthy
    environment:
      HS_FILES_COMPRESSOR_EUREKA_URI: http://hs-eureka:8761/eureka
      HS_FILES_CLIENT_SERVER_URLS: ws://hs-files:8767/ws
      CONFIGSERVER_URI: http://hs-config:8888
    volumes:
      - files:/app/paintings
    command: application.jar --spring.cloud.config.enabled=true --spring.profiles.active=
    ports:
      - '8769:8769'

  hs-gateway:
    image: ${HS_GATEWAY_IMAGE:-mhws/hs-gateway:latest}
    depends_on:
      hs-config:
        condition: service_healthy
      hs-eureka:
        condition: service_healthy
    ports:
      - ${HS_GATEWAY_PORT:-8762}:8762
    environment:
      HS_GATEWAY_EUREKA_URI: http://hs-eureka:8761/eureka
      CONFIGSERVER_URI: http://hs-config:8888
    command: application.jar --spring.cloud.config.enabled=true --spring.profiles.active=

volumes:
  postgres-data:
  kafka_data:
  files:
